{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/input-shims-09d70723.js"],"names":["__webpack_require__","r","__webpack_exports__","d","startInputShims","_chunk_c90aaa66_js__WEBPACK_IMPORTED_MODULE_0__","cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","delete","remove","SKIP_SELECTOR","calcScrollData","inputRect","contentRect","keyboardHeight","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","jsSetFocus","contentEl","scrollData","itemEl","closest","getBoundingClientRect","defaultView","innerHeight","getScrollData","focus","scrollByPoint","then","hasPointerMoved","threshold","startCoord","endCoord","deltaX","x","deltaY","y","setScrollPadding","tagName","parentElement","el","timer","clearTimeout","setProperty","setTimeout","config","doc","document","getNumber","scrollAssist","getBoolean","hideCaret","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","shadowRoot","querySelector","scrollEl","rmFn","scrollHideCaret","shouldHideCaret","onBlur","showCaret","addEventListener","removeEventListener","enableHideCaretOnScroll","coord","touchStart","ev","Object","touchEnd","preventDefault","stopPropagation","enableScrollAssist","focused","didScroll","onScroll","onFocusin","onTouchend","active","matches","tapped","target","blur","enableInputBlurring","onFocusout","enableScrollPadding","_i","inputs_1","length","body","event","fn","unregisterInput"],"mappings":"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","file":"static/js/5.e35be8f1.chunk.js","sourcesContent":["import { p as pointerCoord } from './chunk-c90aaa66.js';\nvar cloneMap = new WeakMap();\n\nvar relocateInput = function relocateInput(componentEl, inputEl, shouldRelocate, inputRelativeY) {\n  if (inputRelativeY === void 0) {\n    inputRelativeY = 0;\n  }\n\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY);\n  } else {\n    removeClone(componentEl, inputEl);\n  }\n};\n\nvar isFocused = function isFocused(input) {\n  return input === input.getRootNode().activeElement;\n};\n\nvar addClone = function addClone(componentEl, inputEl, inputRelativeY) {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  var parentEl = inputEl.parentNode; // DOM WRITES\n\n  var clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  var doc = componentEl.ownerDocument;\n  var tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = \"translate3d(\" + tx + \"px,\" + inputRelativeY + \"px,0) scale(0)\";\n};\n\nvar removeClone = function removeClone(componentEl, inputEl) {\n  var clone = cloneMap.get(componentEl);\n\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n\nvar enableHideCaretOnScroll = function enableHideCaretOnScroll(componentEl, inputEl, scrollEl) {\n  if (!scrollEl || !inputEl) {\n    return function () {\n      return;\n    };\n  }\n\n  var scrollHideCaret = function scrollHideCaret(shouldHideCaret) {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n\n  var onBlur = function onBlur() {\n    return relocateInput(componentEl, inputEl, false);\n  };\n\n  var hideCaret = function hideCaret() {\n    return scrollHideCaret(true);\n  };\n\n  var showCaret = function showCaret() {\n    return scrollHideCaret(false);\n  };\n\n  scrollEl.addEventListener('ionScrollStart', hideCaret);\n  scrollEl.addEventListener('ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return function () {\n    scrollEl.removeEventListener('ionScrollStart', hideCaret);\n    scrollEl.removeEventListener('ionScrollEnd', showCaret);\n    inputEl.addEventListener('ionBlur', onBlur);\n  };\n};\n\nvar SKIP_SELECTOR = 'input, textarea, [no-blur]';\n\nvar enableInputBlurring = function enableInputBlurring() {\n  var focused = true;\n  var didScroll = false;\n  var doc = document;\n\n  var onScroll = function onScroll() {\n    didScroll = true;\n  };\n\n  var onFocusin = function onFocusin() {\n    focused = true;\n  };\n\n  var onTouchend = function onTouchend(ev) {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n\n    var active = doc.activeElement;\n\n    if (!active) {\n      return;\n    } // only blur if the active element is a text-input or a textarea\n\n\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    } // if the selected target is the active element, do not blur\n\n\n    var tapped = ev.target;\n\n    if (tapped === active) {\n      return;\n    }\n\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n\n    focused = false; // TODO: find a better way, why 50ms?\n\n    setTimeout(function () {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n\n  doc.addEventListener('ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return function () {\n    doc.removeEventListener('ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nvar SCROLL_ASSIST_SPEED = 0.3;\n\nvar getScrollData = function getScrollData(componentEl, contentEl, keyboardHeight) {\n  var itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\n\nvar calcScrollData = function calcScrollData(inputRect, contentRect, keyboardHeight, platformHeight) {\n  // compute input's Y values relative to the body\n  var inputTop = inputRect.top;\n  var inputBottom = inputRect.bottom; // compute visible area\n\n  var visibleAreaTop = contentRect.top;\n  var visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight); // compute safe area\n\n  var safeAreaTop = visibleAreaTop + 15;\n  var safeAreaBottom = visibleAreaBottom * 0.5; // figure out if each edge of the input is within the safe area\n\n  var distanceToBottom = safeAreaBottom - inputBottom;\n  var distanceToTop = safeAreaTop - inputTop; // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n\n  var desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0); // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n\n  var scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  var distance = Math.abs(scrollAmount);\n  var duration = distance / SCROLL_ASSIST_SPEED;\n  var scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount: scrollAmount,\n    scrollDuration: scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4\n  };\n};\n\nvar enableScrollAssist = function enableScrollAssist(componentEl, inputEl, contentEl, keyboardHeight) {\n  var coord;\n\n  var touchStart = function touchStart(ev) {\n    coord = pointerCoord(ev);\n  };\n\n  var touchEnd = function touchEnd(ev) {\n    // input cover touchend/mouseup\n    if (!coord) {\n      return;\n    } // get where the touchend/mouseup ended\n\n\n    var endCoord = pointerCoord(ev); // focus this input if the pointer hasn't moved XX pixels\n    // and the input doesn't already have focus\n\n    if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n      ev.preventDefault();\n      ev.stopPropagation(); // begin the input focus process\n\n      jsSetFocus(componentEl, inputEl, contentEl, keyboardHeight);\n    }\n  };\n\n  componentEl.addEventListener('touchstart', touchStart, true);\n  componentEl.addEventListener('touchend', touchEnd, true);\n  return function () {\n    componentEl.removeEventListener('touchstart', touchStart, true);\n    componentEl.removeEventListener('touchend', touchEnd, true);\n  };\n};\n\nvar jsSetFocus = function jsSetFocus(componentEl, inputEl, contentEl, keyboardHeight) {\n  var scrollData = getScrollData(componentEl, contentEl, keyboardHeight);\n\n  if (Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    inputEl.focus();\n    return;\n  } // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n\n\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n  inputEl.focus(); // scroll the input into place\n\n  contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration).then(function () {\n    // the scroll view is in the correct position now\n    // give the native text input focus\n    relocateInput(componentEl, inputEl, false, scrollData.inputSafeY); // ensure this is the focused input\n\n    inputEl.focus();\n  });\n};\n\nvar hasPointerMoved = function hasPointerMoved(threshold, startCoord, endCoord) {\n  if (startCoord && endCoord) {\n    var deltaX = startCoord.x - endCoord.x;\n    var deltaY = startCoord.y - endCoord.y;\n    var distance = deltaX * deltaX + deltaY * deltaY;\n    return distance > threshold * threshold;\n  }\n\n  return false;\n};\n\nvar PADDING_TIMER_KEY = '$ionPaddingTimer';\n\nvar enableScrollPadding = function enableScrollPadding(keyboardHeight) {\n  var doc = document;\n\n  var onFocusin = function onFocusin(ev) {\n    setScrollPadding(ev.target, keyboardHeight);\n  };\n\n  var onFocusout = function onFocusout(ev) {\n    setScrollPadding(ev.target, 0);\n  };\n\n  doc.addEventListener('focusin', onFocusin);\n  doc.addEventListener('focusout', onFocusout);\n  return function () {\n    doc.removeEventListener('focusin', onFocusin);\n    doc.removeEventListener('focusout', onFocusout);\n  };\n};\n\nvar setScrollPadding = function setScrollPadding(input, keyboardHeight) {\n  if (input.tagName !== 'INPUT') {\n    return;\n  }\n\n  if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n    return;\n  }\n\n  if (input.parentElement && input.parentElement.parentElement && input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\n    return;\n  }\n\n  var el = input.closest('ion-content');\n\n  if (el === null) {\n    return;\n  }\n\n  var timer = el[PADDING_TIMER_KEY];\n\n  if (timer) {\n    clearTimeout(timer);\n  }\n\n  if (keyboardHeight > 0) {\n    el.style.setProperty('--keyboard-offset', keyboardHeight + \"px\");\n  } else {\n    el[PADDING_TIMER_KEY] = setTimeout(function () {\n      el.style.setProperty('--keyboard-offset', '0px');\n    }, 120);\n  }\n};\n\nvar INPUT_BLURRING = true;\nvar SCROLL_PADDING = true;\n\nvar startInputShims = function startInputShims(config) {\n  var doc = document;\n  var keyboardHeight = config.getNumber('keyboardHeight', 290);\n  var scrollAssist = config.getBoolean('scrollAssist', true);\n  var hideCaret = config.getBoolean('hideCaretOnScroll', true);\n  var inputBlurring = config.getBoolean('inputBlurring', true);\n  var scrollPadding = config.getBoolean('scrollPadding', true);\n  var inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  var hideCaretMap = new WeakMap();\n  var scrollAssistMap = new WeakMap();\n\n  var registerInput = function registerInput(componentEl) {\n    var inputEl = (componentEl.shadowRoot || componentEl).querySelector('input') || (componentEl.shadowRoot || componentEl).querySelector('textarea');\n    var scrollEl = componentEl.closest('ion-content');\n\n    if (!inputEl) {\n      return;\n    }\n\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      var rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n\n    if (!!scrollEl && scrollAssist && !scrollAssistMap.has(componentEl)) {\n      var rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, keyboardHeight);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n\n  var unregisterInput = function unregisterInput(componentEl) {\n    if (hideCaret) {\n      var fn = hideCaretMap.get(componentEl);\n\n      if (fn) {\n        fn();\n      }\n\n      hideCaretMap.delete(componentEl);\n    }\n\n    if (scrollAssist) {\n      var fn = scrollAssistMap.get(componentEl);\n\n      if (fn) {\n        fn();\n      }\n\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n\n  if (scrollPadding && SCROLL_PADDING) {\n    enableScrollPadding(keyboardHeight);\n  } // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n\n\n  for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n    var input = inputs_1[_i];\n    registerInput(input);\n  }\n\n  doc.body.addEventListener('ionInputDidLoad', function (event) {\n    registerInput(event.target);\n  });\n  doc.body.addEventListener('ionInputDidUnload', function (event) {\n    unregisterInput(event.target);\n  });\n};\n\nexport { startInputShims };"],"sourceRoot":""}