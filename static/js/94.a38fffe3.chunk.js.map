{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/shadow-css-bbdf056f-05cd1ccb.js"],"names":["__webpack_require__","r","__webpack_exports__","d","ShadowCss","scopeCss","this","strictStyling","prototype","shimCssText","cssText","scopeId","hostScopeId","slotScopeId","commentOriginalSelector","commentsWithHash","extractCommentsWithHash","stripComments","orgSelectors","processCommentedSelector_1","rule","placeholder","length","comment","selector","push","processRules","startsWith","content","scopedCssText","_scopeCssText","concat","join","forEach","_a","replace","_insertPolyfillHostInCssText","_convertColonHost","_convertColonHostContext","_convertColonSlotted","_convertShadowDOMSelectors","_scopeSelectors","trim","_convertColonRule","_cssColonHostRe","_colonHostPartReplacer","slotAttr","regExp","_cssColonSlottedRe","m","_i","arguments","compound","suffix","_polyfillHostNoCombinator","_cssColonHostContextRe","_colonHostContextPartReplacer","partReplacer","parts","split","i","p","host","part","indexOf","_polyfillHost","_shadowDOMSelectorsRe","reduce","result","pattern","scopeSelector","hostSelector","slotSelector","_this","_scopeSelector","CssRule","strict","map","shallowPart","_selectorNeedsScoping","_applyStrictSelectorScope","_applySelectorScope","_makeScopeMatcher","test","RegExp","_selectorReSuffix","_applySimpleSelectorScope","_polyfillHostRe","lastIndex","replaceBy_1","_polyfillHostNoCombinatorRe","_","before","colon","after","res","className","_scopeSelectorPart","scopedP","t","matches","match","safeContent","SafeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","part_1","slice","index","substring","restore","_colonHostContextRe","_polyfillHostContext","_colonHostRe","_colonSlottedRe","_polyfillSlotted","placeholders","keep","replaceBy","_content","pseudo","exp","StringWithEscapedBlocks","escapedString","blocks","_parenSuffix","_commentRe","input","_commentWithHashRe","_ruleRe","_curlyRe","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","contentPrefix","inputParts","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex"],"mappings":"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","file":"static/js/94.a38fffe3.chunk.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar ShadowCss =\n/** @class */\nfunction () {\n  function ShadowCss() {\n    this.strictStyling = true;\n  }\n\n  ShadowCss.prototype.shimCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n    if (hostScopeId === void 0) {\n      hostScopeId = '';\n    }\n\n    if (slotScopeId === void 0) {\n      slotScopeId = '';\n    }\n\n    if (commentOriginalSelector === void 0) {\n      commentOriginalSelector = false;\n    }\n\n    var commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    var orgSelectors = [];\n\n    if (commentOriginalSelector) {\n      var processCommentedSelector_1 = function processCommentedSelector_1(rule) {\n        var placeholder = \"/*!@___\" + orgSelectors.length + \"___*/\";\n        var comment = \"/*!@\" + rule.selector + \"*/\";\n        orgSelectors.push({\n          placeholder: placeholder,\n          comment: comment\n        });\n        rule.selector = placeholder + rule.selector;\n        return rule;\n      };\n\n      cssText = processRules(cssText, function (rule) {\n        if (rule.selector[0] !== '@') {\n          return processCommentedSelector_1(rule);\n        } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n          rule.content = processRules(rule.content, processCommentedSelector_1);\n          return rule;\n        }\n\n        return rule;\n      });\n    }\n\n    var scopedCssText = this._scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n\n    cssText = [scopedCssText].concat(commentsWithHash).join('\\n');\n\n    if (commentOriginalSelector) {\n      orgSelectors.forEach(function (_a) {\n        var placeholder = _a.placeholder,\n            comment = _a.comment;\n        cssText = cssText.replace(placeholder, comment);\n      });\n    }\n\n    return cssText;\n  };\n\n  ShadowCss.prototype._scopeCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n    // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n    cssText = this._insertPolyfillHostInCssText(cssText);\n    cssText = this._convertColonHost(cssText);\n    cssText = this._convertColonHostContext(cssText);\n    cssText = this._convertColonSlotted(cssText, slotScopeId);\n    cssText = this._convertShadowDOMSelectors(cssText);\n\n    if (scopeId) {\n      cssText = this._scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n    }\n\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\" + hostScopeId);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return cssText.trim();\n  };\n  /*\n   * convert a rule like :host(.foo) > .bar { }\n   *\n   * to\n   *\n   * .foo<scopeName> > .bar\n  */\n\n\n  ShadowCss.prototype._convertColonHost = function (cssText) {\n    return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\n  };\n  /*\n  * convert a rule like ::slotted(.foo) { }\n  */\n\n\n  ShadowCss.prototype._convertColonSlotted = function (cssText, slotAttr) {\n    var regExp = _cssColonSlottedRe;\n    return cssText.replace(regExp, function () {\n      var m = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        m[_i] = arguments[_i];\n      }\n\n      if (m[2]) {\n        var compound = m[2].trim();\n        var suffix = m[3];\n        var sel = '.' + slotAttr + ' > ' + compound + suffix;\n        return sel;\n      } else {\n        return _polyfillHostNoCombinator + m[3];\n      }\n    });\n  };\n  /*\n   * convert a rule like :host-context(.foo) > .bar { }\n   *\n   * to\n   *\n   * .foo<scopeName> > .bar, .foo scopeName > .bar { }\n   *\n   * and\n   *\n   * :host-context(.foo:host) .bar { ... }\n   *\n   * to\n   *\n   * .foo<scopeName> .bar { ... }\n  */\n\n\n  ShadowCss.prototype._convertColonHostContext = function (cssText) {\n    return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\n  };\n\n  ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, function () {\n      var m = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        m[_i] = arguments[_i];\n      }\n\n      if (m[2]) {\n        var parts = m[2].split(',');\n        var r = [];\n\n        for (var i = 0; i < parts.length; i++) {\n          var p = parts[i].trim();\n          if (!p) break;\n          r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n        }\n\n        return r.join(',');\n      } else {\n        return _polyfillHostNoCombinator + m[3];\n      }\n    });\n  };\n\n  ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {\n    if (part.indexOf(_polyfillHost) > -1) {\n      return this._colonHostPartReplacer(host, part, suffix);\n    } else {\n      return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n  };\n\n  ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {\n    return host + part.replace(_polyfillHost, '') + suffix;\n  };\n  /*\n   * Convert combinators like ::shadow and pseudo-elements like ::content\n   * by replacing with space.\n  */\n\n\n  ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {\n    return _shadowDOMSelectorsRe.reduce(function (result, pattern) {\n      return result.replace(pattern, ' ');\n    }, cssText);\n  }; // change a selector like 'div' to 'name div'\n\n\n  ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector, slotSelector, commentOriginalSelector) {\n    var _this = this;\n\n    return processRules(cssText, function (rule) {\n      var selector = rule.selector;\n      var content = rule.content;\n\n      if (rule.selector[0] !== '@') {\n        selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, slotSelector, _this.strictStyling);\n      } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n        content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector, slotSelector, commentOriginalSelector);\n      }\n\n      selector = selector.replace(/\\s{2,}/g, ' ').trim();\n      return new CssRule(selector, content);\n    });\n  };\n\n  ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, slotSelector, strict) {\n    var _this = this;\n\n    return selector.split(',').map(function (shallowPart) {\n      if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n        return shallowPart.trim();\n      }\n\n      if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n        return strict ? _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector).trim() : _this._applySelectorScope(shallowPart, scopeSelector, hostSelector).trim();\n      } else {\n        return shallowPart.trim();\n      }\n    }).join(', ');\n  };\n\n  ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {\n    var re = this._makeScopeMatcher(scopeSelector);\n\n    return !re.test(selector);\n  };\n\n  ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {\n    var lre = /\\[/g;\n    var rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n  };\n\n  ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {\n    // Difference from webcomponents.js: scopeSelector could not be an array\n    return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n  }; // scope via name and [is=name]\n\n\n  ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n\n    if (_polyfillHostRe.test(selector)) {\n      var replaceBy_1 = this.strictStyling ? \".\" + hostSelector : scopeSelector;\n      return selector.replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n        return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n          return before + replaceBy_1 + colon + after;\n        });\n      }).replace(_polyfillHostRe, replaceBy_1 + ' ');\n    }\n\n    return scopeSelector + ' ' + selector;\n  };\n\n  ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n    var _this = this;\n\n    var isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, function (_) {\n      var parts = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        parts[_i - 1] = arguments[_i];\n      }\n\n      return parts[0];\n    });\n    var className = '.' + scopeSelector;\n\n    var _scopeSelectorPart = function _scopeSelectorPart(p) {\n      var scopedP = p.trim();\n\n      if (!scopedP) {\n        return '';\n      }\n\n      if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n        scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n      } else {\n        // remove :host since it should be unnecessary\n        var t = p.replace(_polyfillHostRe, '');\n\n        if (t.length > 0) {\n          var matches = t.match(/([^:]*)(:*)(.*)/);\n\n          if (matches) {\n            scopedP = matches[1] + className + matches[2] + matches[3];\n          }\n        }\n      }\n\n      return scopedP;\n    };\n\n    var safeContent = new SafeSelector(selector);\n    selector = safeContent.content();\n    var scopedSelector = '';\n    var startIndex = 0;\n    var res;\n    var sep = /( |>|\\+|~(?!=))\\s*/g; // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n\n    var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1; // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n\n    var shouldScope = !hasHost;\n\n    while ((res = sep.exec(selector)) !== null) {\n      var separator = res[1];\n      var part_1 = selector.slice(startIndex, res.index).trim();\n      shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n      var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n      scopedSelector += scopedPart + \" \" + separator + \" \";\n      startIndex = sep.lastIndex;\n    }\n\n    var part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part; // replace the placeholders with their original values\n\n    return safeContent.restore(scopedSelector);\n  };\n\n  ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {\n    selector = selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost).replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n  };\n\n  return ShadowCss;\n}();\n\nvar SafeSelector =\n/** @class */\nfunction () {\n  function SafeSelector(selector) {\n    var _this = this;\n\n    this.placeholders = [];\n    this.index = 0; // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n      var replaceBy = \"__ph-\" + _this.index + \"__\";\n\n      _this.placeholders.push(keep);\n\n      _this.index++;\n      return replaceBy;\n    }); // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n\n    this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n      var replaceBy = \"__ph-\" + _this.index + \"__\";\n\n      _this.placeholders.push(exp);\n\n      _this.index++;\n      return pseudo + replaceBy;\n    });\n  }\n\n  SafeSelector.prototype.restore = function (content) {\n    var _this = this;\n\n    return content.replace(/__ph-(\\d+)__/g, function (_, index) {\n      return _this.placeholders[+index];\n    });\n  };\n\n  SafeSelector.prototype.content = function () {\n    return this._content;\n  };\n\n  return SafeSelector;\n}();\n\nvar CssRule =\n/** @class */\nfunction () {\n  function CssRule(selector, content) {\n    this.selector = selector;\n    this.content = content;\n  }\n\n  return CssRule;\n}();\n\nvar StringWithEscapedBlocks =\n/** @class */\nfunction () {\n  function StringWithEscapedBlocks(escapedString, blocks) {\n    this.escapedString = escapedString;\n    this.blocks = blocks;\n  }\n\n  return StringWithEscapedBlocks;\n}();\n\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted'; // note: :host-context pre-processed to -shadowcsshostcontext.\n\nvar _polyfillHostContext = '-shadowcsscontext';\n\nvar _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\n\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\n\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\n\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\n\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\n\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\n\nvar stripComments = function stripComments(input) {\n  return input.replace(_commentRe, '');\n};\n\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\n\nvar extractCommentsWithHash = function extractCommentsWithHash(input) {\n  return input.match(_commentWithHashRe) || [];\n};\n\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\n\nvar processRules = function processRules(input, ruleCallback) {\n  var inputWithEscapedBlocks = escapeBlocks(input);\n  var nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n    var m = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      m[_i] = arguments[_i];\n    }\n\n    var selector = m[2];\n    var content = '';\n    var suffix = m[4];\n    var contentPrefix = '';\n\n    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = '{';\n    }\n\n    var rule = ruleCallback(new CssRule(selector, content));\n    return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n  });\n};\n\nvar escapeBlocks = function escapeBlocks(input) {\n  var inputParts = input.split(_curlyRe);\n  var resultParts = [];\n  var escapedBlocks = [];\n  var bracketCount = 0;\n  var currentBlockParts = [];\n\n  for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    var part = inputParts[partIndex];\n\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n\n      resultParts.push(part);\n    }\n\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(''));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n\n  return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n};\n\nvar scopeCss = function scopeCss(cssText, scopeId, commentOriginalSelector) {\n  var sc = new ShadowCss();\n  return sc.shimCssText(cssText, scopeId, scopeId + '-h', scopeId + '-s', commentOriginalSelector);\n};\n\nexport { ShadowCss, scopeCss };"],"sourceRoot":""}